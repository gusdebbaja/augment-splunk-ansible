---
# custom_roles/splunk_apps/tasks/configure_apps.yml
# Custom app deployment that works with monorepos
# Updated to work with the modernized cluster-aware playbook and use local copy for large files

- name: Set default splunk_app_deploy_path for clustermanager hosts
  set_fact:
    splunk_app_deploy_path: "etc/master-apps"  # Updated from master-apps
  when: inventory_hostname in groups['clustermanager'] | default([])

- name: Set default splunk_app_deploy_path for shdeployer hosts  
  set_fact:
    splunk_app_deploy_path: "etc/shcluster/apps"
  when: inventory_hostname in groups['shdeployer'] | default([])

- name: Set default splunk_app_deploy_path for deploymentserver hosts
  set_fact:
    splunk_app_deploy_path: "etc/deployment-apps"
  when: inventory_hostname in groups['deploymentserver'] | default([])

- name: Set default splunk_app_deploy_path for all other hosts
  set_fact:
    splunk_app_deploy_path: "etc/apps"
  when: splunk_app_deploy_path is not defined

- name: Display deployment configuration
  debug:
    msg:
      - "Host: {{ inventory_hostname }}"
      - "Groups: {{ group_names }}"
      - "Deploy path: {{ splunk_app_deploy_path }}"
      - "Apps to deploy: {{ git_apps | default([]) | map(attribute='name') | list }}"

- name: Skip if no apps to deploy
  meta: end_play
  when: git_apps is not defined or git_apps | length == 0

# If git_local_clone_path is provided (from the discovery phase), use it
# Otherwise fall back to cloning (for backward compatibility)
- block:
  - name: Use existing git repository from discovery phase
    set_fact:
      repo_source_path: "{{ git_local_clone_path }}"
    when: git_local_clone_path is defined

  - name: Verify existing repository
    stat:
      path: "{{ repo_source_path }}"
    register: existing_repo_check
    delegate_to: localhost
    when: git_local_clone_path is defined

  - name: Clone repository if not using discovery phase
    block:
      - name: Create local directory for managing repos on the target host
        file:
          path: "{{ git_local_clone_path | default('/tmp/') }}{{ ansible_nodename }}"
          state: directory
        delegate_to: localhost
        run_once: true

      - name: Clone monorepo
        git:
          accept_hostkey: true
          repo: "{{ git_server }}/{{ git_project }}"
          version: "{{ git_version | default('main') }}"
          dest: "{{ git_local_clone_path | default('/tmp/') }}{{ ansible_nodename }}_monorepo"
          key_file: "{{ git_key }}"
          force: true
          umask: "022"
        delegate_to: localhost
        run_once: true
        when: git_apps | length > 0

      - name: Set repository source path
        set_fact:
          repo_source_path: "{{ git_local_clone_path | default('/tmp/') }}{{ ansible_nodename }}_monorepo"

    when: git_local_clone_path is not defined or not existing_repo_check.stat.exists

# Deploy applications
- name: Ensure target deployment directory exists
  file:
    path: "{{ splunk_install_path | default('/opt') }}/splunk/{{ splunk_app_deploy_path }}"
    state: directory
    owner: "{{ splunk_nix_user | default('splunk') }}"
    group: "{{ splunk_nix_group | default('splunk') }}"
    mode: '0755'

- name: Filter git apps (default source or git source)
  set_fact:
    git_source_apps: "{{ git_apps | selectattr('source', 'undefined') | list + (git_apps | selectattr('source', 'defined') | selectattr('source', 'equalto', 'git') | list) }}"

- name: Filter splunkbase apps
  set_fact:
    splunkbase_source_apps: "{{ git_apps | selectattr('source', 'defined') | selectattr('source', 'equalto', 'splunkbase') | list }}"

# New logic to discover apps with app.yml files in the splunkbase-apps subdirectory
- name: Find app.yml files in splunkbase-apps subdirectory
  find:
    paths: "{{ repo_source_path }}/splunkbase-apps"
    patterns: "app.yml"
    recurse: yes
    file_type: file
  register: app_yml_files
  delegate_to: localhost

- name: Load and process app.yml configurations
  include_vars:
    file: "{{ item.path }}"
    name: "app_config_{{ item.path | basename | regex_replace('\\.yml$', '') }}"
  loop: "{{ app_yml_files.files }}"
  loop_control:
    label: "{{ item.path }}"
  delegate_to: localhost
  when: app_yml_files.files | length > 0

- name: Build dynamic app list from app.yml files
  set_fact:
    dynamic_splunkbase_apps: "{{ dynamic_splunkbase_apps | default([]) + [app_config_item] }}"
  vars:
    app_config_item:
      name: "{{ (item.path | dirname | basename) }}"
      source: "{{ hostvars[inventory_hostname]['app_config_' + (item.path | basename | regex_replace('\\.yml$', ''))].source | default('git') }}"
      app_relative_path: "splunkbase-apps/{{ (item.path | dirname | basename) }}"
      splunk_app_deploy_path: "{{ hostvars[inventory_hostname]['app_config_' + (item.path | basename | regex_replace('\\.yml$', ''))].splunk_app_deploy_path | default('etc/apps') }}"
  loop: "{{ app_yml_files.files }}"
  loop_control:
    label: "{{ item.path }}"
  when: 
    - app_yml_files.files | length > 0
    - hostvars[inventory_hostname]['app_config_' + (item.path | basename | regex_replace('\\.yml$', ''))].source is defined

- name: Merge dynamic splunkbase apps with existing configuration
  set_fact:
    combined_splunkbase_apps: "{{ splunkbase_source_apps | default([]) + (dynamic_splunkbase_apps | selectattr('source', 'equalto', 'splunkbase') | list) }}"

- name: Create temp directory for splunkbase downloads
  tempfile:
    state: directory
    prefix: splunkbase_
    suffix: _downloads
  register: splunkbase_temp_dir
  delegate_to: localhost
  when: combined_splunkbase_apps | length > 0

- name: Download and extract splunkbase apps
  include_tasks: download_splunkbase_app.yml
  vars:
    app_item: "{{ item }}"
    temp_dir: "{{ splunkbase_temp_dir.path }}"
  loop: "{{ combined_splunkbase_apps }}"
  when: combined_splunkbase_apps | length > 0

- name: Update splunkbase apps list with processed apps
  set_fact:
    final_splunkbase_apps: "{{ processed_splunkbase_apps | default([]) }}"

- name: Copy apps from git repository to Splunk deployment paths
  synchronize:
    src: "{{ repo_source_path }}/{{ item.app_relative_path }}/"
    dest: "{{ splunk_install_path | default('/opt') }}/splunk/{{ item.splunk_app_deploy_path | default(splunk_app_deploy_path) }}/{{ item.name }}/"
    delete: yes
    recursive: yes
    delay_updates: no
    rsync_opts:
      - "--chown={{ splunk_nix_user | default('splunk') }}:{{ splunk_nix_group | default('splunk') }}"
      - "--perms"
      - "--times"
      - "--exclude=.git"
      - "--exclude=*.md"
      - "--exclude=.gitattributes"
      - "--exclude=.gitignore"
      - "--progress"
      - "--partial"
      - "--inplace"
      - "--no-compress"
  loop: "{{ git_source_apps }}"
  register: sync_results_git
  when: git_source_apps | length > 0

- name: Copy apps from downloaded splunkbase apps to Splunk deployment paths
  synchronize:
    src: "{{ item.app_relative_path }}/"
    dest: "{{ splunk_install_path | default('/opt') }}/splunk/{{ item.splunk_app_deploy_path | default(splunk_app_deploy_path) }}/{{ item.name }}/"
    delete: yes
    recursive: yes
    delay_updates: no
    rsync_opts:
      - "--chown={{ splunk_nix_user | default('splunk') }}:{{ splunk_nix_group | default('splunk') }}"
      - "--perms"
      - "--times"
      - "--progress"
      - "--partial"
      - "--inplace"
      - "--no-compress"
  loop: "{{ final_splunkbase_apps }}"
  register: sync_results_splunkbase
  when: final_splunkbase_apps | length > 0

- name: Apply Splunk best practice permissions to deployed apps
  include_tasks: fix_splunk_permissions_unified.yml
  vars:
    target_app_path: "{{ splunk_install_path | default('/opt') }}/splunk/{{ deployed_app.splunk_app_deploy_path | default(splunk_app_deploy_path) }}/{{ deployed_app.name }}"
  loop: "{{ git_source_apps | default([]) + final_splunkbase_apps | default([]) }}"
  loop_control:
    loop_var: deployed_app
  register: permission_results
  when: (git_source_apps | default([]) + final_splunkbase_apps | default([])) | length > 0

- name: Mark apps as changed to trigger handlers
  command: /bin/true
  changed_when: true
  when: 
    - permission_results is defined
    - (git_source_apps | default([]) + final_splunkbase_apps | default([])) | length > 0

- name: Verify app deployment
  stat:
    path: "{{ splunk_install_path | default('/opt') }}/splunk/{{ item.splunk_app_deploy_path | default(splunk_app_deploy_path) }}/{{ item.name }}/default/app.conf"
  loop: "{{ git_source_apps | default([]) + final_splunkbase_apps | default([]) }}"
  register: app_verification
  failed_when: false

- name: Cleanup local app directories (if not using discovery phase)
  file:
    path: "{{ git_local_clone_path | default('/tmp/') }}{{ ansible_nodename }}"
    state: absent
  delegate_to: localhost
  run_once: true
  when: git_local_clone_path is not defined

- name: Cleanup splunkbase temp directory
  file:
    path: "{{ splunkbase_temp_dir.path }}"
    state: absent
  delegate_to: localhost
  run_once: true
  when: splunkbase_temp_dir is defined