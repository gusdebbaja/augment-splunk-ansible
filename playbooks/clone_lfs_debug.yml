---
# debug_git_lfs.yml - Isolated git cloning with verbose output
- name: Debug Git LFS Cloning
  hosts: localhost
  gather_facts: true
  become: false
  
  vars:
    # Use your existing variables
    git_server: "git@github.com:gusdebbaja"
    git_project: "splunk-apps"
    git_key: "/home/jamel/.ssh/git_key"
    monorepo_checkout_dir: "/tmp/splunk-apps-checkout"
    git_version: "main"
    
  tasks:
    - name: Show current environment
      debug:
        msg:
          - "Current user: {{ ansible_user_id }}"
          - "HOME: {{ ansible_env.HOME }}"
          - "Working directory: {{ ansible_env.PWD }}"
          - "PATH: {{ ansible_env.PATH }}"

    - name: Test git-lfs availability with multiple methods
      shell: |
        echo "=== Testing git-lfs availability ==="
        echo "Current PATH: $PATH"
        echo ""
        
        echo "1. Testing 'which git-lfs':"
        which git-lfs || echo "   FAILED: git-lfs not found in PATH"
        echo ""
        
        echo "2. Testing 'command -v git-lfs':"
        command -v git-lfs || echo "   FAILED: git-lfs not found"
        echo ""
        
        echo "3. Testing direct paths:"
        if [ -f /usr/bin/git-lfs ]; then
          echo "   /usr/bin/git-lfs exists"
          /usr/bin/git-lfs version || echo "   FAILED: /usr/bin/git-lfs failed"
        else
          echo "   /usr/bin/git-lfs does not exist"
        fi
        
        if [ -f /usr/local/bin/git-lfs ]; then
          echo "   /usr/local/bin/git-lfs exists"
          /usr/local/bin/git-lfs version || echo "   FAILED: /usr/local/bin/git-lfs failed"
        else
          echo "   /usr/local/bin/git-lfs does not exist"
        fi
        
        echo ""
        echo "4. Final test with explicit PATH:"
        export PATH="/usr/local/bin:/usr/bin:/bin:$PATH"
        git lfs version || echo "   FAILED: git lfs version failed even with explicit PATH"
        
        echo ""
        echo "=== Git LFS test complete ==="
      register: lfs_debug
      failed_when: false

    - name: Show git-lfs debug results
      debug:
        msg: "{{ lfs_debug.stdout_lines }}"

    - name: Clean up any existing checkout
      file:
        path: "{{ monorepo_checkout_dir }}"
        state: absent

    - name: Test basic git clone first (without LFS)
      shell: |
        echo "=== Testing basic git clone ==="
        export PATH="/usr/local/bin:/usr/bin:/bin:$PATH"
        git clone {{ git_server }}/{{ git_project }}.git {{ monorepo_checkout_dir }}
        echo "Clone completed, checking out {{ git_version }}"
        cd {{ monorepo_checkout_dir }}
        git checkout {{ git_version }}
        echo "=== Basic clone complete ==="
      environment:
        GIT_SSH_COMMAND: "ssh -i {{ git_key }} -o StrictHostKeyChecking=no"
        PATH: "/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      register: basic_clone
      failed_when: false

    - name: Show basic clone results
      debug:
        msg: "{{ basic_clone.stdout_lines }}"

    - name: Check repository state after basic clone
      shell: |
        echo "=== Repository state after basic clone ==="
        cd {{ monorepo_checkout_dir }}
        echo "Current directory: $(pwd)"
        echo "Git status:"
        git status
        echo ""
        echo "Git LFS status:"
        git lfs ls-files | head -10 || echo "No LFS files found or git lfs not working"
        echo ""
        echo "Checking for potential LFS files:"
        find . -name "*.tgz" -o -name "*.exe" -o -name "*.zip" | head -5 | while read file; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
            echo "File: $file (size: $size bytes)"
            if [ "$size" -lt 500 ]; then
              echo "  Content preview:"
              head -3 "$file" 2>/dev/null | sed 's/^/    /' || echo "    (unable to read content)"
            fi
          fi
        done
        echo "=== Repository state check complete ==="
      register: repo_state
      failed_when: false

    - name: Show repository state
      debug:
        msg: "{{ repo_state.stdout_lines }}"

    - name: Try git lfs pull
      shell: |
        echo "=== Attempting git lfs pull ==="
        cd {{ monorepo_checkout_dir }}
        export PATH="/usr/local/bin:/usr/bin:/bin:$PATH"
        git lfs pull
        echo "=== LFS pull complete ==="
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin:{{ ansible_env.PATH }}"
      register: lfs_pull
      failed_when: false

    - name: Show LFS pull results
      debug:
        msg: "{{ lfs_pull.stdout_lines }}"

    - name: Final verification of file sizes
      shell: |
        echo "=== Final file size verification ==="
        cd {{ monorepo_checkout_dir }}
        echo "Checking large files again:"
        find . -name "*.tgz" -o -name "*.exe" -o -name "*.zip" | head -10 | while read file; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
            echo "File: $file (size: $size bytes)"
            if [ "$size" -lt 500 ]; then
              echo "  WARNING: This file is suspiciously small!"
              echo "  First few lines:"
              head -3 "$file" 2>/dev/null | sed 's/^/    /' || echo "    (unable to read)"
            else
              echo "  OK: File appears to be actual content"
            fi
          fi
        done
        echo "=== Verification complete ==="
      register: final_check
      failed_when: false

    - name: Show final verification
      debug:
        msg: "{{ final_check.stdout_lines }}"

    - name: Summary
      debug:
        msg:
          - "=== DEBUG SUMMARY ==="
          - "Checkout directory: {{ monorepo_checkout_dir }}"
          - "Basic clone success: {{ 'YES' if basic_clone.rc == 0 else 'NO' }}"
          - "LFS pull success: {{ 'YES' if lfs_pull.rc == 0 else 'NO' }}"
          - ""
          - "Next steps:"
          - "1. Check the file size verification above"
          - "2. If files are still small, LFS is not working properly"
          - "3. If files are large, LFS is working and the issue is elsewhere"