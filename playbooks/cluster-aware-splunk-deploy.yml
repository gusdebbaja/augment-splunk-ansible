---
# modernized-cluster-aware-splunk-deploy.yml
# Handles Git LFS, proper error handling, and modern Splunk cluster paths
# Uses custom roles to avoid modifying vendor-managed ansible-role-for-splunk
    
- name: Discover Apps in Repository
  hosts: localhost
  gather_facts: true
  become: false
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
    monorepo_checkout_dir: "/tmp/splunk-apps-checkout"
    splunkbase_apps_dir: "/home/jamel/splunkbase-apps"

  tasks:
    - name: DEBUG - This play is running!
      debug:
        msg: "The Discover Apps in Repository play is executing."

    - name: Debug monorepo_checkout_dir
      debug:
        msg: "monorepo_checkout_dir={{ monorepo_checkout_dir }}"
    - name: Ensure checkout directory is clean
      file:
        path: "{{ monorepo_checkout_dir }}"
        state: absent

    - name: Create fresh checkout directory
      file:
        path: "{{ monorepo_checkout_dir }}"
        state: directory
        mode: '0755'

    - name: Clone splunk-apps monorepo for discovery
      git:
        repo: "{{ git_server }}/{{ git_project }}.git"
        version: "{{ git_version | default('main') }}"
        dest: "{{ monorepo_checkout_dir }}"
        key_file: "{{ git_key }}"
        accept_hostkey: yes
        force: yes
        update: yes  # Always update to latest
        track_submodules: yes  # Handle submodules if any
      register: git_clone_result

    - name: Verify git operation was successful
      debug:
        msg:
          - "Git clone result: {{ git_clone_result.changed }}"
          - "Before commit: {{ git_clone_result.before | default('N/A') }}"
          - "After commit: {{ git_clone_result.after | default('N/A') }}"

    - name: Check repository status
      shell: |
        cd "{{ monorepo_checkout_dir }}"
        echo "=== REPOSITORY STATUS ==="
        echo "Working directory: $(pwd)"
        echo "Git status:"
        git status --porcelain
        echo "Remote URL: $(git remote get-url origin)"
        echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
        echo "Latest commits:"
        git log --oneline -5
      register: git_status_check

    - name: Display repository status
      debug:
        msg: "{{ git_status_check.stdout_lines }}"

    - name: Get current commit information
      shell: |
        cd "{{ monorepo_checkout_dir }}"
        echo "COMMIT_ID=$(git rev-parse HEAD)"
        echo "COMMIT_SHORT=$(git rev-parse --short HEAD)"
        echo "COMMIT_MSG=$(git log -1 --pretty=format:'%s')"
        echo "COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')"
        echo "COMMIT_DATE=$(git log -1 --pretty=format:'%cd' --date=iso)"
        echo "BRANCH=$(git rev-parse --abbrev-ref HEAD)"
      register: git_commit_info

    - name: Parse commit information
      set_fact:
        splunk_apps_commit_id: "{{ git_commit_info.stdout_lines | select('match', '^COMMIT_ID=') | first | regex_replace('^COMMIT_ID=', '') }}"
        splunk_apps_commit_short: "{{ git_commit_info.stdout_lines | select('match', '^COMMIT_SHORT=') | first | regex_replace('^COMMIT_SHORT=', '') }}"
        splunk_apps_commit_msg: "{{ git_commit_info.stdout_lines | select('match', '^COMMIT_MSG=') | first | regex_replace('^COMMIT_MSG=', '') }}"
        splunk_apps_commit_author: "{{ git_commit_info.stdout_lines | select('match', '^COMMIT_AUTHOR=') | first | regex_replace('^COMMIT_AUTHOR=', '') }}"
        splunk_apps_commit_date: "{{ git_commit_info.stdout_lines | select('match', '^COMMIT_DATE=') | first | regex_replace('^COMMIT_DATE=', '') }}"
        splunk_apps_branch: "{{ git_commit_info.stdout_lines | select('match', '^BRANCH=') | first | regex_replace('^BRANCH=', '') }}"

    - name: Display Git Repository Information
      debug:
        msg:
          - "🔄 GIT REPOSITORY INFORMATION"
          - "Repository: {{ git_server }}/{{ git_project }}.git"
          - "Branch: {{ splunk_apps_branch }}"
          - "Commit ID: {{ splunk_apps_commit_id }}"
          - "Short Commit: {{ splunk_apps_commit_short }}"
          - "Commit Message: {{ splunk_apps_commit_msg }}"
          - "Author: {{ splunk_apps_commit_author }}"
          - "Date: {{ splunk_apps_commit_date }}"
          - "Clone Status: {{ 'SUCCESS' if git_clone_result.changed else 'NO CHANGES' }}"
          - "Local Path: {{ monorepo_checkout_dir }}"

    - name: Debug and copy Splunkbase apps into matching folders in monorepo
      shell: |
        for app in "$SPLUNKBASE_APPS_DIR"/*; do
          [ -d "$app" ] || continue
          appname=$(basename "$app")
          target="$MONOREPO_CHECKOUT_DIR/common/$appname"
          echo "==> Found app: $appname"
          echo "    Scanning for files > 50MB:"
          find "$app" -type f -size +50M -exec du -h {} \;
          if [ -d "$target" ]; then
            echo "    Will copy $app/* -> $target/"
            cp -r "$app"/* "$target"/
          else
            echo "    Target folder $target does not exist in monorepo"
          fi
        done
      args:
        executable: /bin/bash
      environment:
        SPLUNKBASE_APPS_DIR: "{{ splunkbase_apps_dir }}"
        MONOREPO_CHECKOUT_DIR: "{{ monorepo_checkout_dir }}"
      register: splunkbase_copy_debug
      delegate_to: localhost

    - name: Show Splunkbase app copy debug output
      debug:
        msg: "{{ splunkbase_copy_debug.stdout_lines }}"
    - name: Discover searchhead apps
      find:
        paths: "{{ monorepo_checkout_dir }}/searchheads"
        file_type: directory
        recurse: no
      register: searchhead_apps
      failed_when: false

    - name: Debug searchhead apps discovered
      debug:
        msg: "Found {{ searchhead_apps.files | length }} searchhead apps: {{ searchhead_apps.files | map(attribute='path') | map('basename') | list }}"

    - name: Discover indexer apps  
      find:
        paths: "{{ monorepo_checkout_dir }}/indexers"
        file_type: directory
        recurse: no
      register: indexer_apps
      failed_when: false

    - name: Debug indexer apps discovered
      debug:
        msg: "Found {{ indexer_apps.files | length }} indexer apps: {{ indexer_apps.files | map(attribute='path') | map('basename') | list }}"

    - name: Discover common apps
      find:
        paths: "{{ monorepo_checkout_dir }}/common"
        file_type: directory
        recurse: no
      register: common_apps
      failed_when: false

    - name: Debug common apps discovered
      debug:
        msg: "Found {{ common_apps.files | length }} common apps: {{ common_apps.files | map(attribute='path') | map('basename') | list }}"

    - name: Discover heavy forwarder apps
      find:
        paths: "{{ monorepo_checkout_dir }}/heavy_forwarders"
        file_type: directory
        recurse: no
      register: heavy_forwarder_apps
      failed_when: false

    - name: Debug heavy forwarder apps discovered
      debug:
        msg: "Found {{ heavy_forwarder_apps.files | length }} heavy forwarder apps: {{ heavy_forwarder_apps.files | map(attribute='path') | map('basename') | list }}"

    - name: Discover universal forwarder apps  
      find:
        paths: "{{ monorepo_checkout_dir }}/universal_forwarders"
        file_type: directory
        recurse: no
      register: universal_forwarder_apps
      failed_when: false

    - name: Initialize empty git_apps lists
      set_fact:
        shdeployer_git_apps: []
        clustermanager_git_apps: []
        deploymentserver_git_apps: []

    - name: Build git_apps for SH deployer (searchhead apps)
      set_fact:
        shdeployer_git_apps: "{{ shdeployer_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          app_relative_path: "searchheads/{{ item.path | basename }}"
          splunk_app_deploy_path: "etc/shcluster/apps"
      loop: "{{ searchhead_apps.files | default([]) }}"
      when: item.path | basename not in ['Splunk_TA_otel']
    - name: Build git_apps for SH deployer (common apps) 
      set_fact:
        shdeployer_git_apps: "{{ shdeployer_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          app_relative_path: "common/{{ item.path | basename }}"
          splunk_app_deploy_path: "etc/shcluster/apps"
      loop: "{{ common_apps.files | default([]) }}"

    - name: Build git_apps for cluster manager (indexer apps)
      set_fact:
        clustermanager_git_apps: "{{ clustermanager_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          app_relative_path: "indexers/{{ item.path | basename }}"
          splunk_app_deploy_path: "etc/manager-apps"  # Updated from master-apps
      loop: "{{ indexer_apps.files | default([]) }}"

    - name: Build git_apps for cluster manager (common apps for indexers)
      set_fact:
        clustermanager_git_apps: "{{ clustermanager_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          app_relative_path: "common/{{ item.path | basename }}"
          splunk_app_deploy_path: "etc/manager-apps"  # Updated from master-apps
      loop: "{{ common_apps.files | default([]) }}"

    - name: Build git_apps for deployment server (common apps)
      set_fact:
        deploymentserver_git_apps: "{{ deploymentserver_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          app_relative_path: "common/{{ item.path | basename }}"
          splunk_app_deploy_path: "etc/deployment-apps"
      loop: "{{ common_apps.files | default([]) }}"

    - name: Build git_apps for deployment server (heavy forwarders)
      set_fact:
        deploymentserver_git_apps: "{{ deploymentserver_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          app_relative_path: "heavy_forwarders/{{ item.path | basename }}"
          splunk_app_deploy_path: "etc/deployment-apps"
      loop: "{{ heavy_forwarder_apps.files | default([]) }}"

    - name: Debug heavy forwarder apps added to deployment server
      debug:
        msg: "Heavy forwarder apps added to deployment server: {{ heavy_forwarder_apps.files | default([]) | map(attribute='path') | map('basename') | list }}"

    - name: Build git_apps for deployment server (universal forwarders)
      set_fact:
        deploymentserver_git_apps: "{{ deploymentserver_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          app_relative_path: "universal_forwarders/{{ item.path | basename }}"
          splunk_app_deploy_path: "etc/deployment-apps"
      loop: "{{ universal_forwarder_apps.files | default([]) }}"

    - name: Display discovered apps summary
      debug:
        msg:
          - "=== DISCOVERED APPS SUMMARY ==="
          - "SH Deployer apps: {{ shdeployer_git_apps | length }}"
          - "  {{ shdeployer_git_apps | map(attribute='name') | list }}"
          - "Cluster Manager apps: {{ clustermanager_git_apps | length }}"
          - "  {{ clustermanager_git_apps | map(attribute='name') | list }}"
          - "Deployment Server apps: {{ deploymentserver_git_apps | length }}"
          - "  {{ deploymentserver_git_apps | map(attribute='name') | list }}"
          
    - name: Store git repository info for subsequent plays
      set_fact:
        git_repo_path: "{{ monorepo_checkout_dir }}"
        git_checkout_ready: true

    - name: Create deployment metadata file
      copy:
        content: |
          # Splunk Apps Deployment Metadata
          # Generated: {{ ansible_date_time.iso8601 }}
          
          deployment:
            timestamp: "{{ ansible_date_time.iso8601 }}"
            playbook: "cluster-aware-splunk-deploy.yml"
            ansible_user: "{{ ansible_user | default('unknown') }}"
            ansible_host: "{{ ansible_hostname | default('unknown') }}"
          
          source_repository:
            url: "{{ git_server }}/{{ git_project }}.git"
            branch: "{{ splunk_apps_branch }}"
            commit_id: "{{ splunk_apps_commit_id }}"
            commit_short: "{{ splunk_apps_commit_short }}"
            commit_message: "{{ splunk_apps_commit_msg }}"
            commit_author: "{{ splunk_apps_commit_author }}"
            commit_date: "{{ splunk_apps_commit_date }}"
          
          apps_discovered:
            shdeployer_apps: {{ shdeployer_git_apps | map(attribute='name') | list | to_nice_yaml(indent=2) | indent(4) }}
            clustermanager_apps: {{ clustermanager_git_apps | map(attribute='name') | list | to_nice_yaml(indent=2) | indent(4) }}
            deploymentserver_apps: {{ deploymentserver_git_apps | map(attribute='name') | list | to_nice_yaml(indent=2) | indent(4) }}
        dest: "{{ monorepo_checkout_dir }}/deployment-metadata.yml"
        mode: '0644'

  tags: [discovery]

- name: Deploy Apps to Search Head Deployer
  hosts: shdeployer
  become: true
  gather_facts: true
  vars:
    git_apps: "{{ hostvars['localhost']['shdeployer_git_apps'] | default([]) }}"
    git_local_clone_path: "{{ hostvars['localhost']['git_repo_path'] }}"
    # Variables needed for shcluster-bundle handler
    splunk_auth: "{{ splunk_admin_username | default('admin') }}:{{ splunk_admin_password }}"
    deploy_target: "https://{{ groups['search'] | first }}:8089"
  tasks:
    - name: Check if we have apps to deploy
      debug:
        msg: "Deploying {{ git_apps | length }} apps to SH deployer"
        
    - name: Skip if no SH deployer apps found
      meta: end_host
      when: git_apps | length == 0
        
    - name: Deploy apps using custom role
      include_role:
        name: splunk_apps
        tasks_from: configure_apps

    - name: Debug git_apps for shdeployer
      debug:
        msg: "git_apps contains {{ git_apps | length }} items: {{ git_apps }}"

    - name: Debug handler condition variables
      debug:
        msg:
          - "group_names: {{ group_names }}"
          - "deploy_target: {{ deploy_target }}"
          - "deploy_target is defined: {{ deploy_target is defined }}"
          - "shdeployer in group_names: {{ 'shdeployer' in group_names }}"

    - name: Apply shcluster-bundle directly
      block:
        - name: Find all shcluster apps and fix permissions
          find:
            paths: "{{ splunk_home }}/etc/shcluster/apps"
            file_type: directory
            recurse: no
          register: shcluster_apps_found
          become: true

        - name: Fix permissions for each shcluster app individually
          include_tasks: ../custom_roles/splunk_apps/tasks/fix_splunk_permissions_unified.yml
          vars:
            target_app_path: "{{ shcluster_app.path }}"
          loop: "{{ shcluster_apps_found.files }}"
          loop_control:
            loop_var: shcluster_app
          when: shcluster_apps_found.files | length > 0
          
        - name: Apply shcluster bundle
          command: "{{ splunk_home }}/bin/splunk apply shcluster-bundle -preserve-lookups true --answer-yes -auth {{ splunk_auth }} -target {{ deploy_target }}"
          become: true
          become_user: "{{ splunk_nix_user }}"
          register: apply_shcluster_bundle_result
          changed_when: apply_shcluster_bundle_result.rc == 0
          failed_when: apply_shcluster_bundle_result.rc != 0
          retries: "{{ splunk_apply_shcluster_bundle_retries | default(3) }}"
          delay: "{{ splunk_apply_shcluster_bundle_delay | default(10) }}"
          no_log: false

      when: 
        - git_apps | length > 0
        - "'shdeployer' in group_names and deploy_target is defined"

  tags: [shdeployer]

- name: Fix Search Head Permissions After Bundle Deployment
  import_playbook: fix_search_head_permissions.yml
  tags: [shdeployer, permissions]

- name: Deploy Apps to Cluster Manager  
  hosts: clustermanager
  become: true
  gather_facts: true
  vars:
    git_apps: "{{ hostvars['localhost']['clustermanager_git_apps'] | default([]) }}"
    git_local_clone_path: "{{ hostvars['localhost']['git_repo_path'] }}"
    # Variables needed for cluster-bundle handler
    splunk_auth: "{{ splunk_admin_username | default('admin') }}:{{ splunk_admin_password }}"
  handlers:
    - name: apply indexer cluster bundle
      command: "{{ splunk_home }}/bin/splunk apply cluster-bundle --answer-yes --skip-validation -auth {{ splunk_auth }}"
      become: true
      become_user: "{{ splunk_nix_user }}"
      register: apply_cluster_bundle_result
      changed_when: apply_cluster_bundle_result.rc == 0
      failed_when: apply_cluster_bundle_result.rc != 0
      retries: "{{ splunk_apply_cluster_bundle_retries | default(3) }}"
      delay: "{{ splunk_apply_cluster_bundle_delay | default(10) }}"
      no_log: false
      when: "'clustermanager' in group_names"
  tasks:
    - name: Check if we have apps to deploy
      debug:
        msg: "Deploying {{ git_apps | length }} apps to cluster manager"
        
    - name: Skip if no cluster manager apps found
      meta: end_host
      when: git_apps | length == 0
        
    - name: Deploy apps using custom role
      include_role:
        name: splunk_apps
        tasks_from: configure_apps

    - name: Trigger indexer cluster bundle application
      command: /bin/true
      changed_when: true
      notify: apply indexer cluster bundle
      when: git_apps | length > 0

    - name: Force handlers to run now
      meta: flush_handlers

  tags: [clustermanager]

- name: Deploy Apps to Deployment Server
  hosts: deploymentserver
  become: true
  gather_facts: true
  vars:
    git_apps: "{{ hostvars['localhost']['deploymentserver_git_apps'] | default([]) }}"
    git_local_clone_path: "{{ hostvars['localhost']['git_repo_path'] }}"
    # Variables needed for deployment server handler
    splunk_auth: "{{ splunk_admin_username | default('admin') }}:{{ splunk_admin_password }}"
  handlers:
    - name: reload deployment server
      command: "{{ splunk_home }}/bin/splunk reload deploy-server -auth {{ splunk_auth }}"
      become: true
      become_user: "{{ splunk_nix_user }}"
      no_log: false
      when: "'deploymentserver' in group_names"
  tasks:
    - name: Check if we have apps to deploy
      debug:
        msg: "Deploying {{ git_apps | length }} apps to deployment server"
        
    - name: Skip if no deployment server apps found
      meta: end_host
      when: git_apps | length == 0
        
    - name: Deploy apps using custom role
      include_role:
        name: splunk_apps
        tasks_from: configure_apps
        
    - name: Verify deployment server apps were deployed
      find:
        paths: "{{ splunk_install_path | default('/opt') }}/splunk/etc/deployment-apps"
        file_type: directory
      register: deployed_apps
      
    - name: Show deployed apps
      debug:
        msg: "Deployed apps: {{ deployed_apps.files | map(attribute='path') | map('basename') | list }}"

    - name: Check specific heavy forwarder app deployment
      stat:
        path: "{{ splunk_install_path | default('/opt') }}/splunk/etc/deployment-apps/augment_hec_inputs"
      register: hec_inputs_deployed
      
    - name: Debug augment_hec_inputs deployment
      debug:
        msg:
          - "augment_hec_inputs app deployed: {{ hec_inputs_deployed.stat.exists }}"
          - "Path checked: {{ splunk_install_path | default('/opt') }}/splunk/etc/deployment-apps/augment_hec_inputs"

    - name: Check inputs.conf in augment_hec_inputs
      stat:
        path: "{{ splunk_install_path | default('/opt') }}/splunk/etc/deployment-apps/augment_hec_inputs/default/inputs.conf"
      register: inputs_conf_exists
      when: hec_inputs_deployed.stat.exists

    - name: Show inputs.conf content
      slurp:
        path: "{{ splunk_install_path | default('/opt') }}/splunk/etc/deployment-apps/augment_hec_inputs/default/inputs.conf"
      register: inputs_conf_content
      when: inputs_conf_exists.stat.exists | default(false)

    - name: Debug inputs.conf content
      debug:
        msg: "inputs.conf content: {{ inputs_conf_content.content | b64decode | split('\n') }}"
      when: inputs_conf_content is defined

    # NOTE: Deployment server reload will be handled after serverclass configuration and app sync

  tags: [deploymentserver]

- name: Configure Serverclasses  
  hosts: deploymentserver
  become: true
  gather_facts: true
  tasks:
    - name: Apply serverclass configuration
      include_role:
        name: ansible-role-for-splunk
        tasks_from: configure_serverclass.yml
      when: 
        - serverclasses is defined
        - serverclasses | length > 0

    - name: Display serverclass reminder
      debug:
        msg: 
          - "=== SERVERCLASS CONFIGURATION ==="
          - "Remember to update serverclasses in host_vars/{{ inventory_hostname }}.yml"
          - "Current serverclasses configured: {{ serverclasses | length if serverclasses is defined else 0 }}"
      when: hostvars['localhost']['deploymentserver_git_apps'] | default([]) | length > 0

  tags: [serverclass]

- name: Sync Apps to Deployment Server
  hosts: deploymentserver
  gather_facts: true
  become: true
  
  roles:
    - deployment_server_sync
  
  tags: [deploymentserver_sync]

- name: Configure HEC on Heavy Forwarders
  hosts: heavyforwarder
  become: true
  gather_facts: true
  vars:
    splunk_home: "/opt/splunk"
    splunk_user: "splunk"
    splunk_group: "splunk"
  tasks:
    - name: Check if splunk_httpinput app exists
      stat:
        path: "{{ splunk_home }}/etc/apps/splunk_httpinput"
      register: httpinput_app_exists

    - name: Create local directory in splunk_httpinput app
      file:
        path: "{{ splunk_home }}/etc/apps/splunk_httpinput/local"
        state: directory
        owner: "{{ splunk_user }}"
        group: "{{ splunk_group }}"
        mode: '0755'
      when: httpinput_app_exists.stat.exists

    - name: Configure HEC in splunk_httpinput app
      copy:
        content: |
          # HTTP Event Collector Configuration
          # Generated by Ansible on {{ ansible_date_time.iso8601 }}
          # Host: {{ inventory_hostname }}
          
          [http]
          disabled = 0
          enableSSL = true
          port = 8088          
        dest: "{{ splunk_home }}/etc/apps/splunk_httpinput/local/inputs.conf"
        owner: "{{ splunk_user }}"
        group: "{{ splunk_group }}"
        mode: '0644'
        backup: true
      when: httpinput_app_exists.stat.exists
      notify: restart splunk

    - name: Display HEC configuration status
      debug:
        msg:
          - "✅ HEC Configuration Applied"
          - "  Heavy Forwarder: {{ inventory_hostname }}"
          - "  HEC Endpoint: https://{{ inventory_hostname }}:8088"
          - "  SSL Enabled: true"
          - "  Tokens configured: {{ hec_tokens | default([]) | length }}"
          - "  ⚠️  Splunk restart required for changes to take effect"

  handlers:
    - name: restart splunk
      systemd:
        name: splunk
        state: restarted
      become: true

  tags: [hec]

- name: Cleanup and Summary
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Cleanup discovery checkout (optional)
      file:
        path: "{{ git_repo_path }}"
        state: absent
      when: 
        - git_repo_path is defined
        - cleanup_checkout | default(true) | bool

    - name: Display deployment summary
      debug:
        msg:
          - "=== DEPLOYMENT COMPLETE ==="
          - ""
          - "📋 SOURCE INFORMATION:"
          - "  Repository: {{ git_server }}/{{ git_project }}.git"
          - "  Branch: {{ hostvars['localhost']['splunk_apps_branch'] | default('unknown') }}"
          - "  Commit: {{ hostvars['localhost']['splunk_apps_commit_short'] | default('unknown') }}"
          - "  Message: {{ hostvars['localhost']['splunk_apps_commit_msg'] | default('unknown') }}"
          - "  Author: {{ hostvars['localhost']['splunk_apps_commit_author'] | default('unknown') }}"
          - "  Date: {{ hostvars['localhost']['splunk_apps_commit_date'] | default('unknown') }}"
          - ""
          - "📦 APPS DEPLOYED:"
          - "  SH Deployer: {{ hostvars['localhost']['shdeployer_git_apps'] | default([]) | length }} apps"
          - "  Cluster Manager: {{ hostvars['localhost']['clustermanager_git_apps'] | default([]) | length }} apps"  
          - "  Deployment Server: {{ hostvars['localhost']['deploymentserver_git_apps'] | default([]) | length }} apps"
          - ""
          - "✅ NEXT STEPS:"
          - "1. Verify bundles applied successfully"
          - "2. Check forwarder connections to deployment server"
          - "3. Update serverclasses if new forwarder apps were added"
          - "4. Test app functionality in Splunk Web"

  tags: [cleanup]