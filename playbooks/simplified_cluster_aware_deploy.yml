---
# simplified_cluster_aware_deploy.yml
# Testing official install_apps.yml task instead of custom app deployment
# Uses official ansible-role-for-splunk install_apps.yml for app deployment

- name: Discover Apps in Repository
  hosts: localhost
  gather_facts: false
  become: false
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
    monorepo_checkout_dir: "/tmp/splunk-apps-checkout"
    splunkbase_apps_dir: "/home/jamel/splunkbase-apps"

  tasks:
    - name: DEBUG - This play is running!
      debug:
        msg: "The Discover Apps in Repository play is executing."

    - name: Debug monorepo_checkout_dir
      debug:
        msg: "monorepo_checkout_dir={{ monorepo_checkout_dir }}"
    - name: Ensure checkout directory is clean
      file:
        path: "{{ monorepo_checkout_dir }}"
        state: absent

    - name: Create fresh checkout directory
      file:
        path: "{{ monorepo_checkout_dir }}"
        state: directory
        mode: '0755'

    - name: Clone splunk-apps monorepo for discovery
      git:
        repo: "{{ git_server }}/{{ git_project }}.git"
        version: "{{ git_version | default('main') }}"
        dest: "{{ monorepo_checkout_dir }}"
        key_file: "{{ git_key }}"
        accept_hostkey: yes
        force: yes
      register: git_clone_result

    - name: Debug and copy Splunkbase apps into matching folders in monorepo
      shell: |
        for app in "$SPLUNKBASE_APPS_DIR"/*; do
          [ -d "$app" ] || continue
          appname=$(basename "$app")
          target="$MONOREPO_CHECKOUT_DIR/common/$appname"
          echo "==> Found app: $appname"
          echo "    Scanning for files > 50MB:"
          find "$app" -type f -size +50M -exec du -h {} \;
          if [ -d "$target" ]; then
            echo "    Will copy $app/* -> $target/"
            cp -r "$app"/* "$target"/
          else
            echo "    Target folder $target does not exist in monorepo"
          fi
        done
      args:
        executable: /bin/bash
      environment:
        SPLUNKBASE_APPS_DIR: "{{ splunkbase_apps_dir }}"
        MONOREPO_CHECKOUT_DIR: "{{ monorepo_checkout_dir }}"
      register: splunkbase_copy_debug
      delegate_to: localhost

    - name: Show Splunkbase app copy debug output
      debug:
        msg: "{{ splunkbase_copy_debug.stdout_lines }}"
    - name: Discover searchhead apps
      find:
        paths: "{{ monorepo_checkout_dir }}/searchheads"
        file_type: directory
        recurse: no
      register: searchhead_apps
      failed_when: false

    - name: Discover indexer apps  
      find:
        paths: "{{ monorepo_checkout_dir }}/indexers"
        file_type: directory
        recurse: no
      register: indexer_apps
      failed_when: false

    - name: Discover common apps
      find:
        paths: "{{ monorepo_checkout_dir }}/common"
        file_type: directory
        recurse: no
      register: common_apps
      failed_when: false

    - name: Discover heavy forwarder apps
      find:
        paths: "{{ monorepo_checkout_dir }}/heavy_forwarders"
        file_type: directory
        recurse: no
      register: heavy_forwarder_apps
      failed_when: false

    - name: Discover universal forwarder apps  
      find:
        paths: "{{ monorepo_checkout_dir }}/universal_forwarders"
        file_type: directory
        recurse: no
      register: universal_forwarder_apps
      failed_when: false

    - name: Initialize empty git_apps lists
      set_fact:
        shdeployer_git_apps: []
        clustermanager_git_apps: []
        deploymentserver_git_apps: []

    - name: Build git_apps for SH deployer (searchhead apps)
      set_fact:
        shdeployer_git_apps: "{{ shdeployer_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          src: "{{ monorepo_checkout_dir }}/searchheads/{{ item.path | basename }}"
          dest: "etc/shcluster/apps"
      loop: "{{ searchhead_apps.files | default([]) }}"

    - name: Build git_apps for SH deployer (common apps) 
      set_fact:
        shdeployer_git_apps: "{{ shdeployer_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}_common"
          src: "{{ monorepo_checkout_dir }}/common/{{ item.path | basename }}"
          dest: "etc/shcluster/apps"
      loop: "{{ common_apps.files | default([]) }}"

    - name: Build git_apps for cluster manager (indexer apps)
      set_fact:
        clustermanager_git_apps: "{{ clustermanager_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          src: "{{ monorepo_checkout_dir }}/indexers/{{ item.path | basename }}"
          dest: "etc/manager-apps"
      loop: "{{ indexer_apps.files | default([]) }}"

    - name: Build git_apps for cluster manager (common apps for indexers)
      set_fact:
        clustermanager_git_apps: "{{ clustermanager_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          src: "{{ monorepo_checkout_dir }}/common/{{ item.path | basename }}"
          dest: "etc/manager-apps"
      loop: "{{ common_apps.files | default([]) }}"

    - name: Build git_apps for deployment server (heavy forwarders)
      set_fact:
        deploymentserver_git_apps: "{{ deploymentserver_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          src: "{{ monorepo_checkout_dir }}/heavy_forwarders/{{ item.path | basename }}"
          dest: "etc/deployment-apps"
      loop: "{{ heavy_forwarder_apps.files | default([]) }}"

    - name: Build git_apps for deployment server (universal forwarders)
      set_fact:
        deploymentserver_git_apps: "{{ deploymentserver_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item.path | basename }}"
          src: "{{ monorepo_checkout_dir }}/universal_forwarders/{{ item.path | basename }}"
          dest: "etc/deployment-apps"
      loop: "{{ universal_forwarder_apps.files | default([]) }}"

    - name: Display discovered apps summary
      debug:
        msg:
          - "=== DISCOVERED APPS SUMMARY ==="
          - "SH Deployer apps: {{ shdeployer_git_apps | length }}"
          - "  {{ shdeployer_git_apps | map(attribute='name') | list }}"
          - "Cluster Manager apps: {{ clustermanager_git_apps | length }}"
          - "  {{ clustermanager_git_apps | map(attribute='name') | list }}"
          - "Deployment Server apps: {{ deploymentserver_git_apps | length }}"
          - "  {{ deploymentserver_git_apps | map(attribute='name') | list }}"
          
  tags: [discovery]

- name: Deploy Apps to Search Head Deployer
  hosts: shdeployer
  become: true
  gather_facts: true
  vars:
    git_apps: "{{ hostvars['localhost']['shdeployer_git_apps'] | default([]) }}"
    # Variables required by official install_apps.yml
    splunk_admin_username: "{{ splunk_admin_username | default('admin') }}"
    splunk_admin_password: "{{ splunk_admin_password }}"
    deploy_target: "{{ groups['search'] | first }}:8089"
  tasks:
    - name: Check if we have apps to deploy
      debug:
        msg: "Deploying {{ git_apps | length }} apps to SH deployer"
        
    - name: Skip if no SH deployer apps found
      meta: end_host
      when: git_apps | length == 0
        
    - name: Deploy apps using official install_apps task
      include_role:
        name: ansible-role-for-splunk
        tasks_from: install_apps
      when: git_apps | length > 0

  tags: [shdeployer]

- name: Deploy Apps to Cluster Manager  
  hosts: clustermanager
  become: true
  gather_facts: true
  vars:
    git_apps: "{{ hostvars['localhost']['clustermanager_git_apps'] | default([]) }}"
    # Variables required by official install_apps.yml
    splunk_admin_username: "{{ splunk_admin_username | default('admin') }}"
    splunk_admin_password: "{{ splunk_admin_password }}"
  tasks:
    - name: Check if we have apps to deploy
      debug:
        msg: "Deploying {{ git_apps | length }} apps to cluster manager"
        
    - name: Skip if no cluster manager apps found
      meta: end_host
      when: git_apps | length == 0
        
    - name: Deploy apps using official install_apps task
      include_role:
        name: ansible-role-for-splunk
        tasks_from: install_apps
      when: git_apps | length > 0

  tags: [clustermanager]

- name: Deploy Apps to Deployment Server
  hosts: deploymentserver
  become: true
  gather_facts: true
  vars:
    git_apps: "{{ hostvars['localhost']['deploymentserver_git_apps'] | default([]) }}"
    # Variables required by official install_apps.yml
    splunk_admin_username: "{{ splunk_admin_username | default('admin') }}"
    splunk_admin_password: "{{ splunk_admin_password }}"
  tasks:
    - name: Check if we have apps to deploy
      debug:
        msg: "Deploying {{ git_apps | length }} apps to deployment server"
        
    - name: Skip if no deployment server apps found
      meta: end_host
      when: git_apps | length == 0
        
    - name: Deploy apps using official install_apps task
      include_role:
        name: ansible-role-for-splunk
        tasks_from: install_apps
      when: git_apps | length > 0
        
    - name: Verify deployment server apps were deployed
      find:
        paths: "{{ splunk_install_path | default('/opt') }}/splunk/etc/deployment-apps"
        file_type: directory
      register: deployed_apps
      
    - name: Show deployed apps
      debug:
        msg: "Deployed apps: {{ deployed_apps.files | map(attribute='path') | map('basename') | list }}"

  tags: [deploymentserver]

- name: Configure Serverclasses  
  hosts: deploymentserver
  become: true
  gather_facts: true
  tasks:
    - name: Apply serverclass configuration
      include_role:
        name: ansible-role-for-splunk
        tasks_from: configure_serverclass.yml
      when: 
        - serverclasses is defined
        - serverclasses | length > 0

    - name: Display serverclass reminder
      debug:
        msg: 
          - "=== SERVERCLASS CONFIGURATION ==="
          - "Remember to update serverclasses in host_vars/{{ inventory_hostname }}.yml"
          - "Current serverclasses configured: {{ serverclasses | length if serverclasses is defined else 0 }}"
      when: hostvars['localhost']['deploymentserver_git_apps'] | default([]) | length > 0

  tags: [serverclass]

- name: Cleanup and Summary
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Cleanup discovery checkout (optional)
      file:
        path: "{{ monorepo_checkout_dir }}"
        state: absent
      when: 
        - cleanup_checkout | default(true) | bool

    - name: Display deployment summary
      debug:
        msg:
          - "=== DEPLOYMENT COMPLETE ==="
          - ""
          - "Apps deployed to:"
          - "  SH Deployer: {{ hostvars['localhost']['shdeployer_git_apps'] | default([]) | length }} apps"
          - "  Cluster Manager: {{ hostvars['localhost']['clustermanager_git_apps'] | default([]) | length }} apps"  
          - "  Deployment Server: {{ hostvars['localhost']['deploymentserver_git_apps'] | default([]) | length }} apps"
          - ""
          - "Next steps:"
          - "1. Verify bundles applied successfully"
          - "2. Check forwarder connections to deployment server"
          - "3. Update serverclasses if new forwarder apps were added"
          - "4. Test app functionality in Splunk Web"

  tags: [cleanup]