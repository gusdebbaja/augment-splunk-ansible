---
# Ultimate Approach: Dynamic Discovery + Templates + Standard configure_apps.yml
# This combines templated apps with automatic discovery and standard ansible-role-for-splunk

# Phase 1: Clone Repository and Generate Templated Apps
- name: Setup Repository and Generate Templates
  hosts: localhost
  gather_facts: false
  become: false
  vars:
    git_server: "git@github.com:gusdebbaja"
    git_project: "splunk-apps"
    git_version: "main"
    git_ssh_key: "/home/jamel/.ssh/git_key"
    monorepo_checkout_dir: "/tmp/splunk-apps-checkout"
    
  tasks:
    - name: Clone splunk-apps repository
      git:
        repo: "{{ git_server }}/{{ git_project }}.git"
        version: "{{ git_version }}"
        dest: "{{ monorepo_checkout_dir }}"
        key_file: "{{ git_ssh_key }}"
        accept_hostkey: yes
        force: yes

    # Generate templated apps directly into the repository directories
    - name: Generate templated apps for searchheads
      include_role:
        name: splunk_app_templates
      vars:
        app_templates_path: "{{ monorepo_checkout_dir }}/app-templates"
        generated_apps_path: "{{ monorepo_checkout_dir }}/searchheads"
        target_deployment_type: "searchheads"
        target_host_groups: ["search", "augment_shc"]
        environment: "production"
        tenant: "{{ item.split('-')[1] if item.split('-')|length >= 4 else 'default' }}"
        team_name: "{{ item.split('-')[2] if item.split('-')|length >= 4 else 'search' }}"
        organization_name: "{{ (item.split('-')[1] if item.split('-')|length >= 4 else 'default') | title }}Corp"
        cleanup_generated_apps: false
      loop: "{{ (groups['search'] | default([])) + (groups['augment_shc'] | default([])) }}"
      when: 
        - groups['search'] is defined or groups['augment_shc'] is defined
        - item is defined

    - name: Generate templated apps for indexers
      include_role:
        name: splunk_app_templates
      vars:
        app_templates_path: "{{ monorepo_checkout_dir }}/app-templates"
        generated_apps_path: "{{ monorepo_checkout_dir }}/indexers"
        target_deployment_type: "indexers"
        target_host_groups: ["indexer"]
        environment: "production"
        tenant: "{{ item.split('-')[1] if item.split('-')|length >= 4 else 'default' }}"
        team_name: "indexer"
        organization_name: "{{ (item.split('-')[1] if item.split('-')|length >= 4 else 'default') | title }}Corp"
        cleanup_generated_apps: false
      loop: "{{ groups['indexer'] | default([]) }}"
      when: 
        - groups['indexer'] is defined
        - item is defined

    - name: Generate templated apps for deployment server
      include_role:
        name: splunk_app_templates
      vars:
        app_templates_path: "{{ monorepo_checkout_dir }}/app-templates"
        generated_apps_path: "{{ monorepo_checkout_dir }}/deployment_server/templated"
        target_deployment_type: "deployment_server"
        target_host_groups: ["uf", "heavyforwarder"]
        environment: "production"
        tenant: "{{ item.split('-')[1] if item.split('-')|length >= 4 else 'default' }}"
        team_name: "{{ item.split('-')[2] if item.split('-')|length >= 4 else 'forwarder' }}"
        organization_name: "{{ (item.split('-')[1] if item.split('-')|length >= 4 else 'default') | title }}Corp"
        cleanup_generated_apps: false
      loop: "{{ (groups['uf'] | default([])) + (groups['heavyforwarder'] | default([])) }}"
      when: 
        - groups['uf'] is defined or groups['heavyforwarder'] is defined
        - item is defined

    # Discover all apps (both static and generated)
    - name: Discover all apps in searchheads directory
      find:
        paths: "{{ monorepo_checkout_dir }}/searchheads"
        file_type: directory
        recurse: no
      register: all_searchhead_apps

    - name: Discover all apps in indexers directory
      find:
        paths: "{{ monorepo_checkout_dir }}/indexers"
        file_type: directory
        recurse: no
      register: all_indexer_apps

    - name: Discover all apps in common directory
      find:
        paths: "{{ monorepo_checkout_dir }}/common"
        file_type: directory
        recurse: no
      register: all_common_apps

    - name: Discover all apps in deployment_server directory
      find:
        paths: "{{ monorepo_checkout_dir }}/deployment_server"
        file_type: directory
        recurse: yes
        depth: 2
      register: all_deployment_apps

    # Generate git_apps configurations using simple loops
    - name: Initialize empty git_apps lists
      set_fact:
        shdeployer_git_apps: []
        clustermanager_git_apps: []
        deploymentserver_git_apps: []

    - name: Build git_apps for search head deployer
      set_fact:
        shdeployer_git_apps: "{{ shdeployer_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item | basename }}"
          app_relative_path: "/searchheads/{{ item | basename }}/"
          splunk_app_deploy_path: "etc/shcluster/apps"
      loop: "{{ all_searchhead_apps.files | map(attribute='path') | list }}"

    - name: Build git_apps for cluster manager (indexer apps)
      set_fact:
        clustermanager_git_apps: "{{ clustermanager_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item | basename }}"
          app_relative_path: "/indexers/{{ item | basename }}/"
          splunk_app_deploy_path: "etc/manager-apps"
      loop: "{{ all_indexer_apps.files | map(attribute='path') | list }}"

    - name: Build git_apps for cluster manager (common apps)
      set_fact:
        clustermanager_git_apps: "{{ clustermanager_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item | basename }}"
          app_relative_path: "/common/{{ item | basename }}/"
          splunk_app_deploy_path: "etc/manager-apps"
      loop: "{{ all_common_apps.files | map(attribute='path') | list }}"

    - name: Build git_apps for deployment server (deployment_server apps)
      set_fact:
        deploymentserver_git_apps: "{{ deploymentserver_git_apps + [new_app] }}"
      vars:
        relative_path: "{{ item | replace(monorepo_checkout_dir, '') | regex_replace('^/', '') }}"
        new_app:
          name: "{{ item | basename }}"
          app_relative_path: "/{{ relative_path }}/"
          splunk_app_deploy_path: "etc/deployment-apps"
      loop: "{{ all_deployment_apps.files | map(attribute='path') | list }}"

    - name: Build git_apps for deployment server (common apps)
      set_fact:
        deploymentserver_git_apps: "{{ deploymentserver_git_apps + [new_app] }}"
      vars:
        new_app:
          name: "{{ item | basename }}"
          app_relative_path: "/common/{{ item | basename }}/"
          splunk_app_deploy_path: "etc/deployment-apps"
      loop: "{{ all_common_apps.files | map(attribute='path') | list }}"

    # Debug what we discovered
    - name: Display all discovered apps
      debug:
        msg:
          - "=== DISCOVERED APPS ==="
          - "Search Head Apps: {{ all_searchhead_apps.files | map(attribute='path') | map('basename') | list }}"
          - "Indexer Apps: {{ all_indexer_apps.files | map(attribute='path') | map('basename') | list }}"
          - "Common Apps: {{ all_common_apps.files | map(attribute='path') | map('basename') | list }}"
          - "Deployment Server Apps: {{ all_deployment_apps.files | map(attribute='path') | map('basename') | list }}"
          - "Generated SHC git_apps: {{ shdeployer_git_apps | length }} apps"
          - "Generated CM git_apps: {{ clustermanager_git_apps | length }} apps"
          - "Generated DS git_apps: {{ deploymentserver_git_apps | length }} apps"

    # Store for other hosts to use
    - name: Store discovered git_apps for deployment
      set_fact:
        dynamic_git_apps:
          shdeployer: "{{ shdeployer_git_apps }}"
          clustermanager: "{{ clustermanager_git_apps }}"
          deploymentserver: "{{ deploymentserver_git_apps }}"

  tags: [generate_and_discover]

# Phase 2: Deploy to Search Head Deployer using Standard configure_apps.yml
- name: Deploy Apps to Search Head Deployer
  hosts: shdeployer
  become: true
  gather_facts: true
  vars:
    git_apps: "{{ hostvars['localhost']['dynamic_git_apps']['shdeployer'] }}"
    deployment_task: configure_apps.yml
  roles:
    - ansible-role-for-splunk
  tags: [shdeployer_apps]

# Phase 3: Deploy to Cluster Manager using Standard configure_apps.yml
- name: Deploy Apps to Cluster Manager
  hosts: clustermanager
  become: true
  gather_facts: true
  vars:
    git_apps: "{{ hostvars['localhost']['dynamic_git_apps']['clustermanager'] }}"
    deployment_task: configure_apps.yml
  roles:
    - ansible-role-for-splunk
  tags: [clustermanager_apps]

# Phase 4: Deploy to Deployment Server using Standard configure_apps.yml
- name: Deploy Apps to Deployment Server
  hosts: deploymentserver
  become: true
  gather_facts: true
  vars:
    git_apps: "{{ hostvars['localhost']['dynamic_git_apps']['deploymentserver'] }}"
    deployment_task: configure_apps.yml
  roles:
    - ansible-role-for-splunk
  tags: [deploymentserver_apps]

# Phase 5: Configure Serverclasses
- name: Configure Deployment Server Serverclasses
  hosts: deploymentserver
  become: true
  gather_facts: true
  vars:
    deployment_task: configure_serverclass.yml
  roles:
    - ansible-role-for-splunk
  tags: [serverclass]

# Phase 6: Bundles Applied Automatically via Handlers!
# The configure_apps.yml deployment task automatically triggers:
# - "apply indexer cluster bundle" when deploying to etc/manager-apps
# - "apply shcluster-bundle" when deploying to etc/shcluster/apps  
# - "reload deployment server" when deploying to etc/deployment-apps
# No manual bundle application needed!