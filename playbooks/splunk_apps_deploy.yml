---
# Hybrid Approach: Keep Your Templating + Use Standard Deployment Patterns
# This preserves your templating work while using proper Splunk deployment methods

# Phase 1: Generate Templated Apps (Your Custom Logic)
- name: Generate Templated Apps
  hosts: localhost
  gather_facts: false
  become: false
  vars:
    template_apps_source: "/tmp/splunk-apps-checkout/app-templates"
    generated_apps_base: "/tmp/generated-splunk-apps"  # Base path - no recursion
    
  tasks:
    - name: Check if template apps directory exists
      stat:
        path: "{{ template_apps_source }}"
      register: template_dir_check

    - name: Generate template apps for deployment server targets
      include_role:
        name: splunk_app_templates
      vars:
        app_templates_path: "{{ template_apps_source }}"
        generated_apps_path: "{{ generated_apps_base }}/deployment-apps"  # Direct path construction
        target_deployment_type: "deployment_server"
        # Generate apps that will be deployed via deployment server
        target_host_groups: ["uf", "heavyforwarder"]
        environment: "production"
        tenant: "{{ item.split('-')[1] if item.split('-')|length >= 4 else 'default' }}"
        team_name: "{{ item.split('-')[2] if item.split('-')|length >= 4 else 'default' }}"
        organization_name: "{{ (item.split('-')[1] if item.split('-')|length >= 4 else 'default') | title }}Corp"
        cleanup_generated_apps: false
      loop: "{{ groups['uf'] + groups['heavyforwarder'] | default([]) }}"
      when: 
        - template_dir_check.stat.exists
        - groups['uf'] is defined or groups['heavyforwarder'] is defined

    - name: Generate template apps for cluster manager targets  
      include_role:
        name: splunk_app_templates
      vars:
        app_templates_path: "{{ template_apps_source }}"
        generated_apps_path: "{{ generated_apps_base }}/manager-apps"  # Direct path construction
        target_deployment_type: "cluster_manager"
        # Generate apps that will be deployed via cluster manager
        target_host_groups: ["indexer"]
        environment: "production"
        tenant: "{{ item.split('-')[1] if item.split('-')|length >= 4 else 'default' }}"
        team_name: "indexer"
        organization_name: "{{ (item.split('-')[1] if item.split('-')|length >= 4 else 'default') | title }}Corp"
        cleanup_generated_apps: false
      loop: "{{ groups['indexer'] | default([]) }}"
      when: 
        - template_dir_check.stat.exists
        - groups['indexer'] is defined

    - name: Generate template apps for search head deployer targets
      include_role:
        name: splunk_app_templates  
      vars:
        app_templates_path: "{{ template_apps_source }}"
        generated_apps_path: "{{ generated_apps_base }}/shcluster-apps"  # Direct path construction
        target_deployment_type: "shc_deployer"
        # Generate apps that will be deployed via SHC deployer
        target_host_groups: ["search", "augment_shc"]
        environment: "production"
        tenant: "{{ item.split('-')[1] if item.split('-')|length >= 4 else 'default' }}"
        team_name: "search"
        organization_name: "{{ (item.split('-')[1] if item.split('-')|length >= 4 else 'default') | title }}Corp"
        cleanup_generated_apps: false
      loop: "{{ (groups['search'] | default([])) + (groups['augment_shc'] | default([])) }}"
      when: 
        - template_dir_check.stat.exists
        - groups['search'] is defined or groups['augment_shc'] is defined

  tags: [generate_templates]

# Phase 2: Deploy Generated Apps to Deployment Server
- name: Deploy Generated Apps to Deployment Server
  hosts: deploymentserver
  become: true
  gather_facts: true
  vars:
    generated_apps_base: "/tmp/generated-splunk-apps"
    
  tasks:
    - name: Create deployment-apps directory if it doesn't exist
      file:
        path: "/opt/splunk/etc/deployment-apps"
        state: directory
        owner: splunk
        group: splunk
        mode: '0755'

    - name: Check if generated deployment apps exist
      find:
        paths: "{{ generated_apps_base }}/deployment-apps"
        file_type: directory
        recurse: no
      register: generated_deployment_apps
      delegate_to: localhost
      become: false

    - name: Copy generated deployment apps to deployment server
      copy:
        src: "{{ item.path }}/"
        dest: "/opt/splunk/etc/deployment-apps/{{ item.path | basename }}/"
        owner: splunk
        group: splunk
        mode: preserve
        directory_mode: '0755'
      loop: "{{ generated_deployment_apps.files }}"
      when: generated_deployment_apps.files | length > 0

    # Also deploy your static apps using standard method
    - name: Deploy static apps from git
      include_role:
        name: ansible-role-for-splunk
      vars:
        deployment_task: configure_apps.yml

  tags: [deploy_to_ds]

# Phase 3: Deploy Generated Apps to Cluster Manager  
- name: Deploy Generated Apps to Cluster Manager
  hosts: clustermanager
  become: true
  gather_facts: true
  vars:
    generated_apps_base: "/tmp/generated-splunk-apps"
    
  tasks:
    - name: Create manager-apps directory if it doesn't exist
      file:
        path: "/opt/splunk/etc/manager-apps"
        state: directory
        owner: splunk
        group: splunk
        mode: '0755'

    - name: Check if generated manager apps exist
      find:
        paths: "{{ generated_apps_base }}/manager-apps"
        file_type: directory
        recurse: no
      register: generated_manager_apps
      delegate_to: localhost
      become: false

    - name: Copy generated manager apps to cluster manager
      copy:
        src: "{{ item.path }}/"
        dest: "/opt/splunk/etc/manager-apps/{{ item.path | basename }}/"
        owner: splunk
        group: splunk
        mode: preserve
        directory_mode: '0755'
      loop: "{{ generated_manager_apps.files }}"
      when: generated_manager_apps.files | length > 0

    # Also deploy your static apps using standard method
    - name: Deploy static apps from git
      include_role:
        name: ansible-role-for-splunk
      vars:
        deployment_task: configure_apps.yml

  tags: [deploy_to_cm]

# Phase 4: Deploy Generated Apps to Search Head Deployer
- name: Deploy Generated Apps to Search Head Deployer
  hosts: shdeployer
  become: true
  gather_facts: true
  vars:
    generated_apps_base: "/tmp/generated-splunk-apps"
    
  tasks:
    - name: Create shcluster/apps directory if it doesn't exist
      file:
        path: "/opt/splunk/etc/shcluster/apps"
        state: directory
        owner: splunk
        group: splunk
        mode: '0755'

    - name: Check if generated SHC apps exist
      find:
        paths: "{{ generated_apps_base }}/shcluster-apps"
        file_type: directory
        recurse: no
      register: generated_shc_apps
      delegate_to: localhost
      become: false

    - name: Copy generated SHC apps to search head deployer
      copy:
        src: "{{ item.path }}/"
        dest: "/opt/splunk/etc/shcluster/apps/{{ item.path | basename }}/"
        owner: splunk
        group: splunk
        mode: preserve
        directory_mode: '0755'
      loop: "{{ generated_shc_apps.files }}"
      when: generated_shc_apps.files | length > 0

    # Also deploy your static apps using standard method
    - name: Deploy static apps from git
      include_role:
        name: ansible-role-for-splunk
      vars:
        deployment_task: configure_apps.yml

  tags: [deploy_to_shd]

# Phase 5: Configure Serverclasses (Your Existing Logic)
- name: Configure Deployment Server Serverclasses
  hosts: deploymentserver
  become: true
  gather_facts: true
  vars:
    deployment_task: configure_serverclass.yml
  roles:
    - ansible-role-for-splunk
  tags: [serverclass]

# Phase 6: Apply Bundles
- name: Apply Indexer Cluster Bundle
  hosts: clustermanager
  become: true
  gather_facts: true
  vars:
    deployment_task: adhoc_apply_cluster_bundle.yml
  roles:
    - ansible-role-for-splunk
  tags: [cluster_bundle]

- name: Apply Search Head Cluster Bundle
  hosts: shdeployer
  become: true
  gather_facts: true
  vars:
    deployment_task: adhoc_apply_shcluster_bundle.yml
  roles:
    - ansible-role-for-splunk
  tags: [shc_bundle]